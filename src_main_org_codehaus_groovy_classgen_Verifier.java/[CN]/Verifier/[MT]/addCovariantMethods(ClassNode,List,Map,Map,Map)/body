{
  ClassNode sn=classNode.getUnresolvedSuperClass(false);
  if (sn != null) {
    Map genericsSpec=createGenericsSpec(sn,oldGenericsSpec);
    List<MethodNode> classMethods=sn.getMethods();
    for (    Object declaredMethod : declaredMethods) {
      MethodNode method=(MethodNode)declaredMethod;
      if (method.isStatic())       continue;
      storeMissingCovariantMethods(classMethods,method,methodsToAdd,genericsSpec,false);
    }
    if (!abstractMethods.isEmpty()) {
      for (      Object classMethod : classMethods) {
        MethodNode method=(MethodNode)classMethod;
        if (method.isStatic())         continue;
        storeMissingCovariantMethods(abstractMethods.values(),method,methodsToAdd,Collections.EMPTY_MAP,true);
      }
    }
    addCovariantMethods(sn.redirect(),declaredMethods,abstractMethods,methodsToAdd,genericsSpec);
  }
  ClassNode[] interfaces=classNode.getInterfaces();
  for (  ClassNode anInterface : interfaces) {
    List interfacesMethods=anInterface.getMethods();
    Map genericsSpec=createGenericsSpec(anInterface,oldGenericsSpec);
    for (    Object declaredMethod : declaredMethods) {
      MethodNode method=(MethodNode)declaredMethod;
      if (method.isStatic())       continue;
      storeMissingCovariantMethods(interfacesMethods,method,methodsToAdd,genericsSpec,false);
    }
    addCovariantMethods(anInterface,declaredMethods,abstractMethods,methodsToAdd,genericsSpec);
  }
}
