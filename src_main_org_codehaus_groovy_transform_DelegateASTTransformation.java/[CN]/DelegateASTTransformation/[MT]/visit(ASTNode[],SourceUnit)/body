{
  init(nodes,source);
  AnnotatedNode parent=(AnnotatedNode)nodes[1];
  AnnotationNode node=(AnnotationNode)nodes[0];
  DelegateDescription delegate=null;
  if (parent instanceof FieldNode) {
    FieldNode fieldNode=(FieldNode)parent;
    delegate=new DelegateDescription();
    delegate.delegate=fieldNode;
    delegate.annotation=node;
    delegate.name=fieldNode.getName();
    delegate.type=fieldNode.getType();
    delegate.owner=fieldNode.getOwner();
    delegate.getOp=varX(fieldNode);
  }
 else   if (parent instanceof MethodNode) {
    MethodNode methodNode=(MethodNode)parent;
    delegate=new DelegateDescription();
    delegate.delegate=methodNode;
    delegate.annotation=node;
    delegate.name=methodNode.getName();
    delegate.type=methodNode.getReturnType();
    delegate.owner=methodNode.getDeclaringClass();
    delegate.getOp=callThisX(delegate.name);
    if (methodNode.getParameters().length > 0) {
      addError("You can only delegate to methods that take no parameters, but " + delegate.name + " takes "+ methodNode.getParameters().length+ " parameters.",parent);
      return;
    }
  }
  if (delegate != null) {
    if (delegate.type.equals(ClassHelper.OBJECT_TYPE) || delegate.type.equals(GROOVYOBJECT_TYPE)) {
      addError(MY_TYPE_NAME + " field '" + delegate.name+ "' has an inappropriate type: "+ delegate.type.getName()+ ". Please add an explicit type but not java.lang.Object or groovy.lang.GroovyObject.",parent);
      return;
    }
    if (delegate.type.equals(delegate.owner)) {
      addError(MY_TYPE_NAME + " field '" + delegate.name+ "' has an inappropriate type: "+ delegate.type.getName()+ ". Delegation to own type not supported. Please use a different type.",parent);
      return;
    }
    final List<MethodNode> delegateMethods=getAllMethods(delegate.type);
    for (    ClassNode next : delegate.type.getAllInterfaces()) {
      delegateMethods.addAll(getAllMethods(next));
    }
    final boolean skipInterfaces=memberHasValue(node,MEMBER_INTERFACES,false);
    final boolean includeDeprecated=memberHasValue(node,MEMBER_DEPRECATED,true) || (delegate.type.isInterface() && !skipInterfaces);
    final boolean allNames=memberHasValue(node,MEMBER_ALL_NAMES,true);
    delegate.excludes=getMemberStringList(node,MEMBER_EXCLUDES);
    delegate.includes=getMemberStringList(node,MEMBER_INCLUDES);
    delegate.excludeTypes=getMemberClassList(node,MEMBER_EXCLUDE_TYPES);
    delegate.includeTypes=getMemberClassList(node,MEMBER_INCLUDE_TYPES);
    checkIncludeExcludeUndefinedAware(node,delegate.excludes,delegate.includes,delegate.excludeTypes,delegate.includeTypes,MY_TYPE_NAME);
    final List<MethodNode> ownerMethods=getAllMethods(delegate.owner);
    for (    MethodNode mn : delegateMethods) {
      addDelegateMethod(delegate,ownerMethods,mn,includeDeprecated,allNames);
    }
    for (    PropertyNode prop : getAllProperties(delegate.type)) {
      if (prop.isStatic() || !prop.isPublic())       continue;
      String name=prop.getName();
      addGetterIfNeeded(delegate,prop,name,allNames);
      addSetterIfNeeded(delegate,prop,name,allNames);
    }
    if (skipInterfaces)     return;
    final Set<ClassNode> allInterfaces=getInterfacesAndSuperInterfaces(delegate.type);
    final Set<ClassNode> ownerIfaces=delegate.owner.getAllInterfaces();
    Map<String,ClassNode> genericsSpec=createGenericsSpec(delegate.owner);
    genericsSpec=createGenericsSpec(delegate.type,genericsSpec);
    for (    ClassNode iface : allInterfaces) {
      if (Modifier.isPublic(iface.getModifiers()) && !ownerIfaces.contains(iface)) {
        final ClassNode[] ifaces=delegate.owner.getInterfaces();
        final ClassNode[] newIfaces=new ClassNode[ifaces.length + 1];
        for (int i=0; i < ifaces.length; i++) {
          newIfaces[i]=correctToGenericsSpecRecurse(genericsSpec,ifaces[i]);
        }
        newIfaces[ifaces.length]=correctToGenericsSpecRecurse(genericsSpec,iface);
        delegate.owner.setInterfaces(newIfaces);
      }
    }
  }
}
