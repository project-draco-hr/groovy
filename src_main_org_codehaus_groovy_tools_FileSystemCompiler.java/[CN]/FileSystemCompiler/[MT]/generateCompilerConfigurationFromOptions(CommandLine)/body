{
  CompilerConfiguration configuration=new CompilerConfiguration();
  if (cli.hasOption("classpath")) {
    configuration.setClasspath(cli.getOptionValue("classpath"));
  }
  if (cli.hasOption('d')) {
    configuration.setTargetDirectory(cli.getOptionValue('d'));
  }
  configuration.setParameters(cli.hasOption("pa"));
  if (cli.hasOption("encoding")) {
    configuration.setSourceEncoding(cli.getOptionValue("encoding"));
  }
  if (cli.hasOption("basescript")) {
    configuration.setScriptBaseClass(cli.getOptionValue("basescript"));
  }
  if (cli.hasOption('j')) {
    Map<String,Object> compilerOptions=new HashMap<String,Object>();
    String[] namedValues=cli.getOptionValues("J");
    compilerOptions.put("namedValues",namedValues);
    String[] flags=cli.getOptionValues("F");
    if (flags != null && cli.hasOption("pa")) {
      List<String> tmp=new ArrayList<String>(Arrays.asList(flags));
      tmp.add("parameters");
      flags=tmp.toArray(new String[tmp.size()]);
    }
    compilerOptions.put("flags",flags);
    configuration.setJointCompilationOptions(compilerOptions);
  }
  if (cli.hasOption("indy")) {
    configuration.getOptimizationOptions().put("int",false);
    configuration.getOptimizationOptions().put("indy",true);
  }
  if (cli.hasOption("configscript")) {
    String path=cli.getOptionValue("configscript");
    File groovyConfigurator=new File(path);
    Binding binding=new Binding();
    binding.setVariable("configuration",configuration);
    CompilerConfiguration configuratorConfig=new CompilerConfiguration();
    ImportCustomizer customizer=new ImportCustomizer();
    customizer.addStaticStars("org.codehaus.groovy.control.customizers.builder.CompilerCustomizationBuilder");
    configuratorConfig.addCompilationCustomizers(customizer);
    GroovyShell shell=new GroovyShell(binding,configuratorConfig);
    shell.evaluate(groovyConfigurator);
  }
  return configuration;
}
