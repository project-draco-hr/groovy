{
  init(nodes,source);
  AnnotatedNode parent=(AnnotatedNode)nodes[1];
  AnnotationNode anno=(AnnotationNode)nodes[0];
  if (!MY_TYPE.equals(anno.getClassNode()))   return;
  if (parent instanceof ClassNode) {
    ClassNode cNode=(ClassNode)parent;
    if (!checkNotInterface(cNode,MY_TYPE_NAME))     return;
    boolean includeFields=memberHasValue(anno,"includeFields",true);
    boolean includeProperties=!memberHasValue(anno,"includeProperties",false);
    boolean includeSuperFields=memberHasValue(anno,"includeSuperFields",true);
    boolean includeSuperProperties=memberHasValue(anno,"includeSuperProperties",true);
    boolean callSuper=memberHasValue(anno,"callSuper",true);
    boolean force=memberHasValue(anno,"force",true);
    boolean defaults=!memberHasValue(anno,"defaults",false);
    boolean useSetters=memberHasValue(anno,"useSetters",true);
    List<String> excludes=getMemberStringList(anno,"excludes");
    List<String> includes=getMemberStringList(anno,"includes");
    boolean allNames=memberHasValue(anno,"allNames",true);
    if (!checkIncludeExcludeUndefinedAware(anno,excludes,includes,MY_TYPE_NAME))     return;
    if (!checkPropertyList(cNode,includes,"includes",anno,MY_TYPE_NAME,includeFields))     return;
    if (!checkPropertyList(cNode,excludes,"excludes",anno,MY_TYPE_NAME,includeFields))     return;
    if (hasAnnotation(cNode,ImmutableASTTransformation.MY_TYPE))     return;
    createConstructor(this,cNode,includeFields,includeProperties,includeSuperFields,includeSuperProperties,callSuper,force,excludes,includes,useSetters,defaults,allNames);
  }
}
