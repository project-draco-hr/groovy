{
  if (!cNode.getDeclaredConstructors().isEmpty() && !force)   return;
  List<FieldNode> superList=new ArrayList<FieldNode>();
  if (includeSuperProperties) {
    superList.addAll(getSuperPropertyFields(cNode.getSuperClass()));
  }
  if (includeSuperFields) {
    superList.addAll(getSuperNonPropertyFields(cNode.getSuperClass()));
  }
  List<FieldNode> list=new ArrayList<FieldNode>();
  if (includeProperties) {
    list.addAll(getInstancePropertyFields(cNode));
  }
  if (includeFields) {
    list.addAll(getInstanceNonPropertyFields(cNode));
  }
  final List<Parameter> params=new ArrayList<Parameter>();
  final List<Expression> superParams=new ArrayList<Expression>();
  final BlockStatement body=new BlockStatement();
  for (  FieldNode fNode : superList) {
    String name=fNode.getName();
    if (shouldSkipUndefinedAware(name,excludes,includes))     continue;
    params.add(createParam(fNode,name,defaults,xform));
    boolean hasSetter=cNode.getProperty(name) != null && !fNode.isFinal();
    if (callSuper) {
      superParams.add(varX(name));
    }
 else {
      if (useSetters && hasSetter) {
        body.addStatement(stmt(callThisX(getSetterName(name),varX(name))));
      }
 else {
        body.addStatement(assignS(propX(varX("this"),name),varX(name)));
      }
    }
  }
  if (callSuper) {
    body.addStatement(stmt(ctorX(ClassNode.SUPER,args(superParams))));
  }
  for (  FieldNode fNode : list) {
    String name=fNode.getName();
    if (shouldSkipUndefinedAware(name,excludes,includes))     continue;
    Parameter nextParam=createParam(fNode,name,defaults,xform);
    params.add(nextParam);
    boolean hasSetter=cNode.getProperty(name) != null && !fNode.isFinal();
    if (useSetters && hasSetter) {
      body.addStatement(stmt(callThisX(getSetterName(name),varX(nextParam))));
    }
 else {
      body.addStatement(assignS(propX(varX("this"),name),varX(nextParam)));
    }
  }
  cNode.addConstructor(new ConstructorNode(ACC_PUBLIC,params.toArray(new Parameter[params.size()]),ClassNode.EMPTY_ARRAY,body));
  if (params.size() > 0 && defaults) {
    ClassNode firstParam=params.get(0).getType();
    if (params.size() > 1 || firstParam.equals(ClassHelper.OBJECT_TYPE)) {
      String message="The class " + cNode.getName() + " was incorrectly initialized via the map constructor with null.";
      if (firstParam.equals(ClassHelper.MAP_TYPE)) {
        addMapConstructors(cNode,true,message);
      }
 else {
        ClassNode candidate=HMAP_TYPE;
        while (candidate != null) {
          if (candidate.equals(firstParam)) {
            addMapConstructors(cNode,true,message);
            break;
          }
          candidate=candidate.getSuperClass();
        }
      }
    }
  }
}
