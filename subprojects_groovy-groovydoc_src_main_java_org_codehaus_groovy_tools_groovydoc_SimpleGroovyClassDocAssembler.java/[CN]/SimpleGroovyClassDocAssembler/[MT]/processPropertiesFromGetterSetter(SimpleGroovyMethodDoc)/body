{
  String methodName=currentMethodDoc.name();
  int len=methodName.length();
  String prefix=null;
  String propName=null;
  if (len > 3 && methodName.startsWith("get")) {
    prefix="get";
    propName=methodName.substring(3);
  }
 else   if (len > 3 && methodName.startsWith("set")) {
    prefix="set";
    propName=methodName.substring(3);
  }
 else   if (len > 2 && methodName.startsWith("is")) {
    prefix="is";
    propName=methodName.substring(2);
  }
 else {
    return;
  }
  SimpleGroovyClassDoc classDoc=getCurrentClassDoc();
  if (classDoc == null) {
    return;
  }
  GroovyMethodDoc methods[]=classDoc.methods();
  String expectedMethodName=null;
  if ("set".equals(prefix) && (currentMethodDoc.parameters().length >= 1 && !currentMethodDoc.parameters()[0].typeName().equals("boolean"))) {
    expectedMethodName="get" + propName;
  }
 else   if ("get".equals(prefix) && !currentMethodDoc.returnType().typeName().equals("boolean")) {
    expectedMethodName="set" + propName;
  }
 else   if ("is".equals(prefix)) {
    expectedMethodName="set" + propName;
  }
 else {
    expectedMethodName="is" + propName;
  }
  for (  GroovyMethodDoc methodDoc : methods) {
    if (methodDoc.name().equals(expectedMethodName)) {
      String fieldName=propName.substring(0,1).toLowerCase() + propName.substring(1);
      SimpleGroovyFieldDoc currentFieldDoc=new SimpleGroovyFieldDoc(fieldName,classDoc);
      if (expectedMethodName.startsWith("set") && methodDoc.parameters().length >= 1) {
        String typeName=methodDoc.parameters()[0].typeName();
        currentFieldDoc.setType(new SimpleGroovyType(typeName));
      }
 else {
        currentFieldDoc.setType(methodDoc.returnType());
      }
      if (methodDoc.isPublic() && currentMethodDoc.isPublic()) {
        classDoc.addProperty(currentFieldDoc);
        break;
      }
    }
  }
}
