{
  final Map<MacroSubstitutionKey,ClosureExpression> map=new HashMap<MacroSubstitutionKey,ClosureExpression>();
  final MapExpression mapExpression=new MapExpression();
  ClassCodeVisitorSupport visitor=new ClassCodeVisitorSupport(){
    @Override protected SourceUnit getSourceUnit(){
      return null;
    }
    @Override public void visitClass(    final ClassNode node){
      super.visitClass(node);
      Iterator<InnerClassNode> it=node.getInnerClasses();
      while (it.hasNext()) {
        InnerClassNode next=it.next();
        visitClass(next);
      }
    }
    @Override public void visitMethodCallExpression(    MethodCallExpression call){
      super.visitMethodCallExpression(call);
      if (isBuildInvocation(call,MacroTransformation.DOLLAR_VALUE)) {
        ClosureExpression substitutionClosureExpression=getClosureArgument(call);
        if (substitutionClosureExpression == null) {
          return;
        }
        Statement code=substitutionClosureExpression.getCode();
        if (code instanceof BlockStatement) {
          ((BlockStatement)code).setVariableScope(null);
        }
        MacroSubstitutionKey key=new MacroSubstitutionKey(call,expr.getLineNumber(),expr.getColumnNumber());
        map.put(key,substitutionClosureExpression);
      }
    }
  }
;
  if (expr instanceof ClassNode) {
    visitor.visitClass((ClassNode)expr);
  }
 else {
    expr.visit(visitor);
  }
  for (  Map.Entry<MacroSubstitutionKey,ClosureExpression> entry : map.entrySet()) {
    mapExpression.addMapEntryExpression(entry.getKey().toConstructorCallExpression(),entry.getValue());
  }
  return mapExpression;
}
