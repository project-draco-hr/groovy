{
  boolean notExpectedArgs=false;
  if (args != null && Object[].class.isAssignableFrom(args.getClass())) {
    Object[] arr=(Object[])args;
    try {
      if (arr.length == 0) {
        call(name);
      }
 else       if (arr.length == 1) {
        if (arr[0] instanceof Closure) {
          final Closure callable=(Closure)arr[0];
          call(name,callable);
        }
 else         if (arr[0] instanceof Map) {
          final Map<String,Map> map=Collections.singletonMap(name,(Map)arr[0]);
          call(map);
        }
 else {
          notExpectedArgs=true;
        }
      }
 else       if (arr.length == 2 && arr[0] instanceof Map && arr[1] instanceof Closure) {
        Map map=(Map)arr[0];
        final Closure callable=(Closure)arr[1];
        call(name,map,callable);
      }
 else       if (StreamingJsonDelegate.isCollectionWithClosure(arr)) {
        final Collection coll=(Collection)arr[0];
        final Closure callable=(Closure)arr[1];
        call(name,coll,callable);
      }
 else {
        notExpectedArgs=true;
      }
    }
 catch (    IOException ioe) {
      throw new JsonException(ioe);
    }
  }
 else {
    notExpectedArgs=true;
  }
  if (!notExpectedArgs) {
    return this;
  }
 else {
    throw new JsonException("Expected no arguments, a single map, a single closure, or a map and closure as arguments.");
  }
}
