{
  ClassNode parent=node.getSuperClass();
  Map<String,MethodNode> result;
  if (parent != null) {
    result=parent.getDeclaredMethodsMap();
  }
 else {
    result=new HashMap<String,MethodNode>();
  }
  ClassNodeUtils.addInterfaceMethods(node,result);
  for (  MethodNode methodNode : node.getMethods()) {
    MethodNode mn=result.get(methodNode.getTypeDescriptor());
    if (mn != null && (mn.isStatic() ^ methodNode.isStatic()) && !methodNode.isStaticConstructor()) {
      if (!mn.isAbstract())       continue;
      ClassNode declaringClass=mn.getDeclaringClass();
      ClassNode cn=declaringClass.getOuterClass();
      if (cn == null && declaringClass.isResolved()) {
        Class typeClass=declaringClass.getTypeClass();
        typeClass=typeClass.getEnclosingClass();
        if (typeClass != null) {
          cn=ClassHelper.make(typeClass);
        }
      }
      if (cn == null || !Traits.isTrait(cn)) {
        ASTNode errorNode=methodNode;
        String name=mn.getName();
        if (errorNode.getLineNumber() == -1) {
          for (          PropertyNode propertyNode : node.getProperties()) {
            if (name.startsWith("set") || name.startsWith("get") || name.startsWith("is")) {
              String propName=Verifier.capitalize(propertyNode.getField().getName());
              String shortName=name.substring(name.startsWith("is") ? 2 : 3);
              if (propName.equals(shortName)) {
                errorNode=propertyNode;
                break;
              }
            }
          }
        }
        addError("The " + getDescription(methodNode) + " is already defined in "+ getDescription(node)+ ". You cannot have both a static and an instance method with the same signature",errorNode);
      }
    }
    result.put(methodNode.getTypeDescriptor(),methodNode);
  }
}
