{
  if (smaller == null) {
    throw new IllegalArgumentException("Must specify a non-null value for the 'from' index in a Range");
  }
 else   if (larger == null) {
    throw new IllegalArgumentException("Must specify a non-null value for the 'to' index in a Range");
  }
  if (reverse == null) {
    boolean computedReverse=areReversed(smaller,larger);
    if (computedReverse) {
      Comparable temp=larger;
      larger=smaller;
      smaller=temp;
    }
    this.reverse=computedReverse;
  }
 else {
    this.reverse=reverse;
  }
  if (smaller instanceof Short) {
    smaller=((Short)smaller).intValue();
  }
 else   if (smaller instanceof Float) {
    smaller=((Float)smaller).doubleValue();
  }
  if (larger instanceof Short) {
    larger=((Short)larger).intValue();
  }
 else   if (larger instanceof Float) {
    larger=((Float)larger).doubleValue();
  }
  if (smaller instanceof Integer && larger instanceof Long) {
    smaller=((Integer)smaller).longValue();
  }
 else   if (larger instanceof Integer && smaller instanceof Long) {
    larger=((Integer)larger).longValue();
  }
  if (smaller.getClass() == larger.getClass() || (smaller instanceof Number && larger instanceof Number)) {
    this.from=smaller;
    this.to=larger;
  }
 else {
    Comparable tempfrom=normaliseStringType(smaller);
    Comparable tempto=normaliseStringType(larger);
    if (tempfrom instanceof Number && tempto instanceof Number) {
      this.from=tempfrom;
      this.to=tempto;
    }
 else {
      Comparable start=this.reverse ? larger : smaller;
      if (start instanceof String || start instanceof Number) {
        throw new IllegalArgumentException("Incompatible Argument classes for ObjectRange " + smaller.getClass() + ", "+ larger.getClass());
      }
      this.from=smaller;
      this.to=larger;
    }
  }
  checkBoundaryCompatibility();
}
