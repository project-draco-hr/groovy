{
  if (size == -1) {
    int tempsize=0;
    if ((from instanceof Integer || from instanceof Long) && (to instanceof Integer || to instanceof Long)) {
      final BigInteger fromNum=new BigInteger(from.toString());
      final BigInteger toNum=new BigInteger(to.toString());
      final BigInteger sizeNum=toNum.subtract(fromNum).add(new BigInteger("1"));
      tempsize=sizeNum.intValue();
      if (!BigInteger.valueOf(tempsize).equals(sizeNum)) {
        tempsize=Integer.MAX_VALUE;
      }
    }
 else     if (from instanceof Character && to instanceof Character) {
      final char fromNum=(Character)from;
      final char toNum=(Character)to;
      tempsize=toNum - fromNum + 1;
    }
 else     if (((from instanceof BigDecimal || from instanceof BigInteger) && to instanceof Number) || ((to instanceof BigDecimal || to instanceof BigInteger) && from instanceof Number)) {
      final BigDecimal fromNum=new BigDecimal(from.toString());
      final BigDecimal toNum=new BigDecimal(to.toString());
      final BigInteger sizeNum=toNum.subtract(fromNum).add(new BigDecimal(1.0)).toBigInteger();
      tempsize=sizeNum.intValue();
      if (!BigInteger.valueOf(tempsize).equals(sizeNum)) {
        tempsize=Integer.MAX_VALUE;
      }
    }
 else {
      final Iterator<Comparable> iter=new StepIterator(this,1);
      while (iter.hasNext()) {
        tempsize++;
        if (tempsize < 0) {
          break;
        }
        iter.next();
      }
    }
    if (tempsize < 0) {
      tempsize=Integer.MAX_VALUE;
    }
    size=tempsize;
  }
  return size;
}
