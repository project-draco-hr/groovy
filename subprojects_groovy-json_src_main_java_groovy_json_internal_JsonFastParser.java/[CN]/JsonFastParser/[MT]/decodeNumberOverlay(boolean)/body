{
  char[] array=charArray;
  final int startIndex=__index;
  int index=__index;
  char currentChar;
  boolean doubleFloat=false;
  boolean foundDot=false;
  boolean foundSign=false;
  boolean foundExp=false;
  if (minus && index + 1 < array.length) {
    index++;
  }
  while (true) {
    currentChar=array[index];
    if (isNumberDigit(currentChar)) {
    }
 else     if (currentChar <= 32) {
      break;
    }
 else     if (isDelimiter(currentChar)) {
      break;
    }
 else     if (isDecimalChar(currentChar)) {
switch (currentChar) {
case DECIMAL_POINT:
        if (foundDot || foundExp) {
          complain("unexpected character " + currentChar);
        }
      foundDot=true;
    break;
case LETTER_E:
case LETTER_BIG_E:
  if (foundExp) {
    complain("unexpected character " + currentChar);
  }
foundExp=true;
break;
case MINUS:
case PLUS:
if (foundSign || !foundExp) {
complain("unexpected character " + currentChar);
}
if (foundExp && array[index - 1] != LETTER_E && array[index - 1] != LETTER_BIG_E) {
complain("unexpected character " + currentChar);
}
foundSign=true;
break;
}
doubleFloat=true;
}
 else {
complain("unexpected character " + currentChar);
}
index++;
if (index >= array.length) break;
}
if (foundExp) {
char prevChar=array[index - 1];
if (prevChar == LETTER_E || prevChar == LETTER_BIG_E || prevChar == MINUS || prevChar == PLUS) {
complain("unexpected character " + currentChar);
}
}
__index=index;
__currentChar=currentChar;
Type type=doubleFloat ? Type.DOUBLE : Type.INTEGER;
return new NumberValue(chop,type,startIndex,__index,this.charArray);
}
