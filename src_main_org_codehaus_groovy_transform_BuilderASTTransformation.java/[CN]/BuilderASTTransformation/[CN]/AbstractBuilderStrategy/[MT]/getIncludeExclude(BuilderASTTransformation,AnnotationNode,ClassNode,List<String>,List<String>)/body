{
  List<String> directExcludes=transform.getMemberList(anno,"excludes");
  if (directExcludes != null)   excludes.addAll(directExcludes);
  List<String> directIncludes=transform.getMemberList(anno,"includes");
  if (directIncludes != null)   includes.addAll(directIncludes);
  if (includes.isEmpty() && excludes.isEmpty()) {
    if (transform.hasAnnotation(cNode,TupleConstructorASTTransformation.MY_TYPE)) {
      AnnotationNode tupleConstructor=cNode.getAnnotations(TupleConstructorASTTransformation.MY_TYPE).get(0);
      if (excludes.isEmpty()) {
        List<String> tupleExcludes=transform.getMemberList(tupleConstructor,"excludes");
        if (tupleExcludes != null)         excludes.addAll(tupleExcludes);
      }
      if (includes.isEmpty()) {
        List<String> tupleIncludes=transform.getMemberList(tupleConstructor,"includes");
        if (tupleIncludes != null)         includes.addAll(tupleIncludes);
      }
    }
  }
  return transform.checkIncludeExclude(anno,excludes,includes,MY_TYPE_NAME);
}
