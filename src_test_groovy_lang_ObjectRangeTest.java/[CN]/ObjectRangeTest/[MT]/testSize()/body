{
  Range r=createRange(0,10);
  assertEquals("Size of " + r,11,r.size());
  r=createRange(0,1);
  assertEquals("Size of " + r,2,r.size());
  r=createRange(1,0);
  assertEquals("Size of " + r,2,r.size());
  r=createRange(0,0);
  assertEquals("Size of " + r,1,r.size());
  r=createRange(new BigDecimal("2.1"),new BigDecimal("10.0"));
  assertEquals("Size of " + r,8,r.size());
  r=createRange(new BigDecimal("10"),new BigDecimal("2.1"));
  assertEquals("Size of " + r,8,r.size());
  r=createRange("a","d");
  assertEquals("Size of " + r,4,r.size());
  r=createRange("d","a");
  assertEquals("Size of " + r,4,r.size());
  r=createRange("aa1","aa4");
  assertEquals("Size of " + r,4,r.size());
  r=createRange("aa4","aa1");
  assertEquals("Size of " + r,4,r.size());
  r=createRange('7',';');
  assertEquals(5,r.size());
  Range mixed=createRange('7',';');
  assertEquals(5,mixed.size());
  mixed=createRange('7',59.5);
  assertEquals(5,mixed.size());
  mixed=createRange('7',59);
  assertEquals(5,mixed.size());
  mixed=createRange('7',new BigInteger("59"));
  assertEquals(5,mixed.size());
  mixed=createRange('7',new BigDecimal("59.5"));
  assertEquals(5,mixed.size());
  assertEquals(Integer.MAX_VALUE,new ObjectRange(0L,Integer.MAX_VALUE).size());
  assertEquals(Integer.MAX_VALUE,new ObjectRange(Long.MIN_VALUE,Long.MAX_VALUE).size());
  assertEquals(Integer.MAX_VALUE,new ObjectRange(new BigInteger("-10"),new BigInteger(Long.toString((long)Integer.MAX_VALUE) + 1L)).size());
}
