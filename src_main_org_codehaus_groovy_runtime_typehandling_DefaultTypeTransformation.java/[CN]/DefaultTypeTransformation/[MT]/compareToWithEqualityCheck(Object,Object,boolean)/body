{
  Exception cause=null;
  if (left == right) {
    return 0;
  }
  if (left == null) {
    return -1;
  }
 else   if (right == null) {
    return 1;
  }
  if (left instanceof Comparable || left instanceof Number) {
    if (left instanceof Number) {
      if (right instanceof Character || right instanceof Number) {
        return DefaultGroovyMethods.compareTo((Number)left,castToNumber(right));
      }
      if (isValidCharacterString(right)) {
        return DefaultGroovyMethods.compareTo((Number)left,ShortTypeHandling.castToChar(right));
      }
    }
 else     if (left instanceof Character) {
      if (isValidCharacterString(right)) {
        return DefaultGroovyMethods.compareTo((Character)left,ShortTypeHandling.castToChar(right));
      }
      if (right instanceof Number) {
        return DefaultGroovyMethods.compareTo((Character)left,(Number)right);
      }
      if (right instanceof String) {
        return (left.toString()).compareTo((String)right);
      }
      if (right instanceof GString) {
        return (left.toString()).compareTo(right.toString());
      }
    }
 else     if (right instanceof Number) {
      if (isValidCharacterString(left)) {
        return DefaultGroovyMethods.compareTo(ShortTypeHandling.castToChar(left),(Number)right);
      }
    }
 else     if (left instanceof String && right instanceof Character) {
      return ((String)left).compareTo(right.toString());
    }
 else     if (left instanceof String && right instanceof GString) {
      return ((String)left).compareTo(right.toString());
    }
 else     if (left instanceof GString && right instanceof String) {
      return ((GString)left).compareTo(right);
    }
    if (!equalityCheckOnly || left.getClass().isAssignableFrom(right.getClass()) || (right.getClass() != Object.class && right.getClass().isAssignableFrom(left.getClass()))) {
      Comparable comparable=(Comparable)left;
      try {
        return comparable.compareTo(right);
      }
 catch (      ClassCastException cce) {
        if (!equalityCheckOnly)         cause=cce;
      }
    }
  }
  if (equalityCheckOnly) {
    return -1;
  }
  String message=MessageFormat.format("Cannot compare {0} with value ''{1}'' and {2} with value ''{3}''",left.getClass().getName(),left,right.getClass().getName(),right);
  if (cause != null) {
    throw new IllegalArgumentException(message,cause);
  }
 else {
    throw new IllegalArgumentException(message);
  }
}
