{
  return new Options().addOption(builder("classpath").hasArg().argName("path").desc("Specify where to find the class files - must be first argument").build()).addOption(builder("cp").longOpt("classpath").hasArg().argName("path").desc("Aliases for '-classpath'").build()).addOption(builder("D").longOpt("define").desc("define a system property").hasArg().argName("name=value").build()).addOption(builder().longOpt("disableopt").desc("disables one or all optimization elements. " + "optlist can be a comma separated list with the elements: " + "all (disables all optimizations), "+ "int (disable any int based optimizations)").hasArg().argName("optlist").build()).addOption(builder("h").hasArg(false).desc("usage information").longOpt("help").build()).addOption(builder("d").hasArg(false).desc("debug mode will print out full stack traces").longOpt("debug").build()).addOption(builder("v").hasArg(false).desc("display the Groovy and JVM versions").longOpt("version").build()).addOption(builder("c").argName("charset").hasArg().desc("specify the encoding of the files").longOpt("encoding").build()).addOption(builder("e").argName("script").hasArg().desc("specify a command line script").build()).addOption(builder("i").argName("extension").optionalArg(true).desc("modify files in place; create backup if extension is given (e.g. \'.bak\')").build()).addOption(builder("n").hasArg(false).desc("process files line by line using implicit 'line' variable").build()).addOption(builder("p").hasArg(false).desc("process files line by line and print result (see also -n)").build()).addOption(builder("pa").hasArg(false).desc("Generate metadata for reflection on method parameter names (jdk8+ only)").longOpt("parameters").build()).addOption(builder("l").argName("port").optionalArg(true).desc("listen on a port and process inbound lines (default: 1960)").build()).addOption(builder("a").argName("splitPattern").optionalArg(true).desc("split lines using splitPattern (default '\\s') using implicit 'split' variable").longOpt("autosplit").build()).addOption(builder().longOpt("indy").desc("enables compilation using invokedynamic").build()).addOption(builder().longOpt("configscript").hasArg().desc("A script for tweaking the configuration options").build()).addOption(builder("b").longOpt("basescript").hasArg().argName("class").desc("Base class name for scripts (must derive from Script)").build());
}
