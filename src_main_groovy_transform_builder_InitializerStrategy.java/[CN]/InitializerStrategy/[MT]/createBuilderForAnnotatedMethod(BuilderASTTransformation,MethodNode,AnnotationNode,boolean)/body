{
  if (transform.getMemberValue(anno,"includes") != null || transform.getMemberValue(anno,"excludes") != null) {
    transform.addError("Error during " + BuilderASTTransformation.MY_TYPE_NAME + " processing: includes/excludes only allowed on classes",anno);
  }
  if (mNode instanceof ConstructorNode) {
    mNode.setModifiers(ACC_PRIVATE | ACC_SYNTHETIC);
  }
 else {
    if ((mNode.getModifiers() & ACC_STATIC) == 0) {
      transform.addError("Error during " + BuilderASTTransformation.MY_TYPE_NAME + " processing: method builders only allowed on static methods",anno);
    }
    mNode.setModifiers(ACC_PRIVATE | ACC_SYNTHETIC | ACC_STATIC);
  }
  ClassNode buildee=mNode.getDeclaringClass();
  Parameter[] parameters=mNode.getParameters();
  if (parameters.length == 0) {
    transform.addError("Error during " + BuilderASTTransformation.MY_TYPE_NAME + " processing: at least one parameter is required for this strategy",anno);
  }
  ClassNode builder=createInnerHelperClass(buildee,getBuilderClassName(buildee,anno),parameters.length);
  List<FieldNode> convertedFields=convertParamsToFields(builder,parameters);
  buildCommon(buildee,anno,convertedFields,builder);
  if (mNode instanceof ConstructorNode) {
    createBuildeeConstructors(transform,buildee,builder,convertedFields,false,useSetters);
  }
 else {
    createBuildeeMethods(buildee,mNode,builder,convertedFields);
  }
}
