{
  controller.resetLineNumber();
  Parameter[] parameters=node.getParameters();
  String methodType=BytecodeHelper.getMethodDescriptor(node.getReturnType(),parameters);
  String signature=BytecodeHelper.getGenericsMethodSignature(node);
  int modifiers=node.getModifiers();
  if (isVargs(node.getParameters()))   modifiers|=Opcodes.ACC_VARARGS;
  MethodVisitor mv=cv.visitMethod(modifiers,node.getName(),methodType,signature,buildExceptions(node.getExceptions()));
  controller.setMethodVisitor(mv);
  visitAnnotations(node,mv);
  for (int i=0; i < parameters.length; i++) {
    visitParameterAnnotations(parameters[i],i,mv);
  }
  if (getCompileUnit().getConfig().getParameters()) {
    for (int i=0; i < parameters.length; i++) {
      mv.visitParameter(parameters[i].getName(),0);
    }
  }
  if (controller.getClassNode().isAnnotationDefinition() && !node.isStaticConstructor()) {
    visitAnnotationDefault(node,mv);
  }
 else   if (!node.isAbstract()) {
    Statement code=node.getCode();
    mv.visitCode();
    if (code instanceof BytecodeSequence && ((BytecodeSequence)code).getInstructions().size() == 1 && ((BytecodeSequence)code).getInstructions().get(0) instanceof BytecodeInstruction) {
      ((BytecodeInstruction)((BytecodeSequence)code).getInstructions().get(0)).visit(mv);
    }
 else {
      visitStdMethod(node,isConstructor,parameters,code);
    }
    try {
      mv.visitMaxs(0,0);
    }
 catch (    Exception e) {
      throw new GroovyRuntimeException("ASM reporting processing error for " + controller.getClassNode() + "#"+ node.getName()+ " with signature "+ node.getTypeDescriptor()+ " in "+ sourceFile+ ":"+ node.getLineNumber(),e);
    }
  }
  mv.visitEnd();
}
