{
  List<Statement> grabInitializers=new ArrayList<Statement>();
  MapExpression basicArgs=new MapExpression();
  if (autoDownload != null) {
    basicArgs.addMapEntryExpression(constX(AUTO_DOWNLOAD_SETTING),constX(autoDownload));
  }
  if (disableChecksums != null) {
    basicArgs.addMapEntryExpression(constX(DISABLE_CHECKSUMS_SETTING),constX(disableChecksums));
  }
  if (systemProperties != null && !systemProperties.isEmpty()) {
    BlockStatement block=new BlockStatement();
    for (    Map.Entry e : systemProperties.entrySet()) {
      block.addStatement(stmt(callX(SYSTEM_CLASSNODE,"setProperty",args(constX(e.getKey()),constX(e.getValue())))));
    }
    StaticMethodCallExpression enabled=callX(SYSTEM_CLASSNODE,"getProperty",args(constX("groovy.grape.enable"),constX("true")));
    grabInitializers.add(ifS(eqX(enabled,constX("true")),block));
  }
  if (!grabExcludeMaps.isEmpty()) {
    ListExpression list=new ListExpression();
    for (    Map<String,Object> map : grabExcludeMaps) {
      Set<Map.Entry<String,Object>> entries=map.entrySet();
      MapExpression inner=new MapExpression();
      for (      Map.Entry<String,Object> entry : entries) {
        inner.addMapEntryExpression(constX(entry.getKey()),constX(entry.getValue()));
      }
      list.addExpression(inner);
    }
    basicArgs.addMapEntryExpression(constX("excludes"),list);
  }
  List<Expression> argList=new ArrayList<Expression>();
  argList.add(basicArgs);
  if (grabMapsInit.size() == 0)   return;
  for (  Map<String,Object> grabMap : grabMapsInit) {
    MapExpression dependencyArg=new MapExpression();
    for (    String s : GRAB_REQUIRED) {
      dependencyArg.addMapEntryExpression(constX(s),constX(grabMap.get(s)));
    }
    for (    String s : GRAB_OPTIONAL) {
      if (grabMap.containsKey(s))       dependencyArg.addMapEntryExpression(constX(s),constX(grabMap.get(s)));
    }
    argList.add(dependencyArg);
  }
  grabInitializers.add(stmt(callX(grapeClassNode,"grab",args(argList))));
  classNode.addStaticInitializerStatements(grabInitializers,true);
}
