{
  Map options=config.getJointCompilationOptions();
  LinkedList<String> paras=new LinkedList<String>();
  File target=config.getTargetDirectory();
  if (target == null)   target=new File(".");
  paras.add("-d");
  paras.add(target.getAbsolutePath());
  paras.add("-sourcepath");
  paras.add(((File)options.get("stubDir")).getAbsolutePath());
  String[] flags=(String[])options.get("flags");
  if (flags != null) {
    for (    String flag : flags) {
      paras.add('-' + flag);
    }
  }
  boolean hadClasspath=false;
  String[] namedValues=(String[])options.get("namedValues");
  if (namedValues != null) {
    for (int i=0; i < namedValues.length; i+=2) {
      String name=namedValues[i];
      if (name.equals("classpath"))       hadClasspath=true;
      paras.add('-' + name);
      paras.add(namedValues[i + 1]);
    }
  }
  if (!hadClasspath) {
    List<String> paths=new ArrayList<String>(config.getClasspath());
    ClassLoader cl=parentClassLoader;
    while (cl != null) {
      if (cl instanceof URLClassLoader) {
        for (        URL u : ((URLClassLoader)cl).getURLs()) {
          try {
            paths.add(new File(u.toURI()).getPath());
          }
 catch (          URISyntaxException e) {
          }
        }
      }
      cl=cl.getParent();
    }
    try {
      CodeSource codeSource=AccessController.doPrivileged(new PrivilegedAction<CodeSource>(){
        @Override public CodeSource run(){
          return GroovyObject.class.getProtectionDomain().getCodeSource();
        }
      }
);
      if (codeSource != null) {
        paths.add(new File(codeSource.getLocation().toURI()).getPath());
      }
    }
 catch (    URISyntaxException e) {
    }
    StringBuilder resultPath=new StringBuilder(DefaultGroovyMethods.join((Iterable)paths,File.pathSeparator));
    paras.add("-classpath");
    paras.add(resultPath.toString());
  }
  paras.addAll(files);
  return paras.toArray(new String[paras.size()]);
}
