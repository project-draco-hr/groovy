{
  Expression args=transform(mce.getArguments());
  Expression method=transform(mce.getMethod());
  Expression object=transform(mce.getObjectExpression());
  boolean isExplicitThisOrSuper=false;
  boolean isExplicitSuper=false;
  if (object instanceof VariableExpression) {
    VariableExpression ve=(VariableExpression)object;
    isExplicitThisOrSuper=!mce.isImplicitThis() && (ve.isThisExpression() || ve.isSuperExpression());
    isExplicitSuper=ve.isSuperExpression();
  }
  if (mce.isImplicitThis() || isExplicitThisOrSuper) {
    if (mce.isImplicitThis()) {
      Expression ret=findStaticMethodImportFromModule(method,args);
      if (ret != null) {
        setSourcePosition(ret,mce);
        return ret;
      }
      if (method instanceof ConstantExpression && !inLeftExpression) {
        String methodName=(String)((ConstantExpression)method).getValue();
        ret=findStaticFieldOrPropAccessorImportFromModule(methodName);
        if (ret != null) {
          ret=new MethodCallExpression(ret,"call",args);
          setSourcePosition(ret,mce);
          return ret;
        }
      }
    }
 else     if (currentMethod != null && currentMethod.isStatic() && isExplicitSuper) {
      MethodCallExpression ret=new MethodCallExpression(new ClassExpression(currentClass.getSuperClass()),method,args);
      setSourcePosition(ret,mce);
      return ret;
    }
    if (method instanceof ConstantExpression) {
      ConstantExpression ce=(ConstantExpression)method;
      Object value=ce.getValue();
      if (value instanceof String) {
        boolean foundInstanceMethod=false;
        String methodName=(String)value;
        boolean inInnerClass=isInnerClass(currentClass);
        if (currentMethod != null && !currentMethod.isStatic()) {
          if (currentClass.hasPossibleMethod(methodName,args)) {
            foundInstanceMethod=true;
          }
        }
        boolean lookForPossibleStaticMethod=!methodName.equals("call");
        lookForPossibleStaticMethod&=!foundInstanceMethod;
        lookForPossibleStaticMethod|=inSpecialConstructorCall;
        lookForPossibleStaticMethod&=!inInnerClass;
        if (!inClosure && lookForPossibleStaticMethod && (hasPossibleStaticMethod(currentClass,methodName,args,true)) || hasPossibleStaticProperty(currentClass,methodName)) {
          StaticMethodCallExpression smce=new StaticMethodCallExpression(currentClass,methodName,args);
          setSourcePosition(smce,mce);
          return smce;
        }
        if (!inClosure && inInnerClass && inSpecialConstructorCall&& mce.isImplicitThis()&& !foundInstanceMethod) {
          if (currentClass.getOuterClass().hasPossibleMethod(methodName,args)) {
            object=new PropertyExpression(new ClassExpression(currentClass.getOuterClass()),new ConstantExpression("this"));
          }
 else           if (hasPossibleStaticMethod(currentClass.getOuterClass(),methodName,args,true) || hasPossibleStaticProperty(currentClass.getOuterClass(),methodName)) {
            StaticMethodCallExpression smce=new StaticMethodCallExpression(currentClass.getOuterClass(),methodName,args);
            setSourcePosition(smce,mce);
            return smce;
          }
        }
      }
    }
  }
  MethodCallExpression result=new MethodCallExpression(object,method,args);
  result.setSafe(mce.isSafe());
  result.setImplicitThis(mce.isImplicitThis());
  result.setSpreadSafe(mce.isSpreadSafe());
  result.setMethodTarget(mce.getMethodTarget());
  result.setGenericsTypes(mce.getGenericsTypes());
  setSourcePosition(result,mce);
  return result;
}
