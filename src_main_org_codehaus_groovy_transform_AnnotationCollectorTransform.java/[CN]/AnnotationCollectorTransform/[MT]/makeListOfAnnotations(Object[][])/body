{
  if (data.length == 0)   return Collections.EMPTY_LIST;
  List<AnnotationNode> ret=new ArrayList<AnnotationNode>(data.length);
  for (  Object[] inner : data) {
    Class anno=(Class)inner[0];
    AnnotationNode toAdd=new AnnotationNode(ClassHelper.make(anno));
    ret.add(toAdd);
    @SuppressWarnings("unchecked") Map<String,Object> member=(Map<String,Object>)inner[1];
    if (member.isEmpty())     continue;
    Map<String,Expression> generated=new HashMap<String,Expression>(member.size());
    for (    String name : member.keySet()) {
      Object val=member.get(name);
      generated.put(name,makeExpression(val));
    }
    toAdd.getMembers().putAll(generated);
  }
  return ret;
}
