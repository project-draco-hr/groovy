{
  final ClosureExpression closureExpression=getClosureArgument(macroCall);
  if (closureExpression == null) {
    return true;
  }
  if (closureExpression.getParameters() != null && closureExpression.getParameters().length > 0) {
    addError("Macro closure arguments are not allowed",closureExpression);
    return true;
  }
  final MapExpression mapExpression=new MapExpression();
  (new CodeVisitorSupport(){
    @Override public void visitMethodCallExpression(    MethodCallExpression call){
      super.visitMethodCallExpression(call);
      if (isBuildInvocation(call,MacroTransformation.DOLLAR_VALUE)) {
        ClosureExpression substitutionClosureExpression=getClosureArgument(call);
        if (substitutionClosureExpression == null) {
          return;
        }
        MacroSubstitutionKey key=new MacroSubstitutionKey(call,closureExpression.getLineNumber(),closureExpression.getColumnNumber());
        mapExpression.addMapEntryExpression(key.toConstructorCallExpression(),substitutionClosureExpression);
      }
    }
  }
).visitClosureExpression(closureExpression);
  String source=convertClosureToSource(closureExpression);
  BlockStatement closureBlock=(BlockStatement)closureExpression.getCode();
  Boolean asIs=false;
  TupleExpression macroArguments=getMacroArguments(macroCall);
  if (macroArguments == null) {
    return true;
  }
  List<Expression> macroArgumentsExpressions=macroArguments.getExpressions();
  if (macroArgumentsExpressions.size() > 1) {
    Expression firstArgument=macroArgumentsExpressions.get(0);
    if (!(firstArgument instanceof ConstantExpression)) {
      addError("AsIs argument value should be constant(true or false)",firstArgument);
      return true;
    }
    ConstantExpression asIsConstantExpression=(ConstantExpression)firstArgument;
    if (!(asIsConstantExpression.getValue() instanceof Boolean)) {
      addError("AsIs argument value should be boolean",asIsConstantExpression);
      return true;
    }
    asIs=(Boolean)asIsConstantExpression.getValue();
  }
  List<Expression> otherArgs=new ArrayList<Expression>();
  otherArgs.add(new ConstantExpression(asIs));
  otherArgs.add(new ConstantExpression(source));
  otherArgs.add(mapExpression);
  otherArgs.add(new ClassExpression(ClassHelper.makeWithoutCaching(MacroBuilder.getMacroValue(closureBlock,asIs).getClass(),false)));
  macroCall.setArguments(new ArgumentListExpression(otherArgs));
  macroCall.setObjectExpression(new PropertyExpression(new ClassExpression(ClassHelper.makeWithoutCaching(MacroBuilder.class,false)),"INSTANCE"));
  macroCall.setSpreadSafe(false);
  macroCall.setSafe(false);
  macroCall.setImplicitThis(false);
  return true;
}
