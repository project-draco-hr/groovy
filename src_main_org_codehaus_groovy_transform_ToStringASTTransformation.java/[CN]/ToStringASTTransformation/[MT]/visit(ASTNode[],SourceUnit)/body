{
  init(nodes,source);
  AnnotatedNode parent=(AnnotatedNode)nodes[1];
  AnnotationNode anno=(AnnotationNode)nodes[0];
  if (!MY_TYPE.equals(anno.getClassNode()))   return;
  if (parent instanceof ClassNode) {
    ClassNode cNode=(ClassNode)parent;
    if (!checkNotInterface(cNode,MY_TYPE_NAME))     return;
    boolean includeSuper=memberHasValue(anno,"includeSuper",true);
    boolean includeSuperProperties=memberHasValue(anno,"includeSuperProperties",true);
    boolean cacheToString=memberHasValue(anno,"cache",true);
    if (includeSuper && cNode.getSuperClass().getName().equals("java.lang.Object")) {
      addError("Error during " + MY_TYPE_NAME + " processing: includeSuper=true but '"+ cNode.getName()+ "' has no super class.",anno);
    }
    boolean includeNames=memberHasValue(anno,"includeNames",true);
    boolean includeFields=memberHasValue(anno,"includeFields",true);
    List<String> excludes=getMemberStringList(anno,"excludes");
    List<String> includes=getMemberStringList(anno,"includes");
    boolean ignoreNulls=memberHasValue(anno,"ignoreNulls",true);
    boolean includePackage=!memberHasValue(anno,"includePackage",false);
    boolean allProperties=!memberHasValue(anno,"allProperties",false);
    if (!checkIncludeExcludeUndefinedAware(anno,excludes,includes,MY_TYPE_NAME))     return;
    if (!checkPropertyList(cNode,includes,"includes",anno,MY_TYPE_NAME,includeFields))     return;
    if (!checkPropertyList(cNode,excludes,"excludes",anno,MY_TYPE_NAME,includeFields))     return;
    createToString(cNode,includeSuper,includeFields,excludes,includes,includeNames,ignoreNulls,includePackage,cacheToString,includeSuperProperties,allProperties);
  }
}
