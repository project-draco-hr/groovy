{
  boolean error=checkWildcard(node);
  if (error)   return;
  boolean isAnon=node instanceof InnerClassNode && ((InnerClassNode)node).isAnonymous();
  checkGenericsUsage(node.getUnresolvedSuperClass(false),node.getSuperClass(),isAnon ? true : null);
  ClassNode[] interfaces=node.getInterfaces();
  for (  ClassNode anInterface : interfaces) {
    checkGenericsUsage(anInterface,anInterface.redirect());
  }
  node.visitContents(this);
}
