{
  ClassNode cNode=method.getDeclaringClass();
  ClassNode next=cNode;
  outer:   while (next != null) {
    Map genericsSpec=createGenericsSpec(next);
    MethodNode mn=correctToGenericsSpec(genericsSpec,method);
    if (next != cNode) {
      ClassNode correctedNext=correctToGenericsSpecRecurse(genericsSpec,next);
      MethodNode found=getDeclaredMethodCorrected(genericsSpec,mn,correctedNext);
      if (found != null)       break;
    }
    List<ClassNode> ifaces=new ArrayList<ClassNode>();
    ifaces.addAll(Arrays.asList(next.getInterfaces()));
    Map updatedGenericsSpec=new HashMap(genericsSpec);
    while (!ifaces.isEmpty()) {
      ClassNode origInterface=ifaces.remove(0);
      if (!origInterface.equals(ClassHelper.OBJECT_TYPE)) {
        updatedGenericsSpec=createGenericsSpec(origInterface,updatedGenericsSpec);
        ClassNode iNode=correctToGenericsSpecRecurse(updatedGenericsSpec,origInterface);
        MethodNode found2=getDeclaredMethodCorrected(updatedGenericsSpec,mn,iNode);
        if (found2 != null)         break outer;
        ifaces.addAll(Arrays.asList(iNode.getInterfaces()));
      }
    }
    ClassNode superClass=next.getUnresolvedSuperClass();
    if (superClass != null) {
      next=correctToGenericsSpecRecurse(updatedGenericsSpec,superClass);
    }
 else {
      next=null;
    }
  }
  return next != null;
}
